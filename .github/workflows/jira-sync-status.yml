name: Sync Issue Status with Jira

on:
  issues:
    types: [closed, reopened]
  pull_request:
    types: [opened, closed]

jobs:
  sync-status:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Extract Jira Key from Title
        id: extract
        run: |
          title="${{ github.event.issue.title || github.event.pull_request.title }}"
          echo "[DEBUG] Issue/PR Title: $title"

          jira_key=$(echo "$title" | python3 -c "import re, sys; title = sys.stdin.read().strip(); match = re.search(r'\[([A-Z]+\d+-\d+)\]', title); print(match.group(1) if match else '')")

          if [ -n "$jira_key" ]; then
            echo "[DEBUG] Extracted Jira Key: $jira_key"
            echo "jira_key=$jira_key" >> $GITHUB_OUTPUT
          else
            echo "[DEBUG] Jira Key not found in title"
            echo "jira_key=" >> $GITHUB_OUTPUT
          fi

      # Jira 전환(transition) 확인을 위한 API 호출
      - name: Get Available Transitions
        if: steps.extract.outputs.jira_key
        id: transitions
        continue-on-error: true
        run: |
          echo "[DEBUG] Input Jira Key: ${{ steps.extract.outputs.jira_key }}"
          echo "[DEBUG] Jira Base URL: ${{ secrets.JIRA_BASE_URL }}"

          # Jira API 설정 확인
          if [ -z "${{ secrets.JIRA_BASE_URL }}" ] || [ -z "${{ secrets.JIRA_USER_EMAIL }}" ] || [ -z "${{ secrets.JIRA_API_TOKEN }}" ]; then
            echo "[ERROR] Missing Jira configuration. Please check secrets: JIRA_BASE_URL, JIRA_USER_EMAIL, JIRA_API_TOKEN"
            echo "done_id=" >> $GITHUB_OUTPUT
            echo "in_progress_id=" >> $GITHUB_OUTPUT
            echo "review_id=" >> $GITHUB_OUTPUT
            echo "todo_id=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # JIRA_BASE_URL 형식 확인
          jira_url="${{ secrets.JIRA_BASE_URL }}"
          if [[ ! "$jira_url" == https://* ]]; then
            echo "[ERROR] JIRA_BASE_URL should start with https:// (current: $jira_url)"
            echo "[ERROR] Example: https://your-company.atlassian.net"
            echo "done_id=" >> $GITHUB_OUTPUT
            echo "in_progress_id=" >> $GITHUB_OUTPUT
            echo "review_id=" >> $GITHUB_OUTPUT
            echo "todo_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # HTTP 상태 코드와 함께 응답 받기
          echo "[DEBUG] Attempting to call Jira API..."
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X GET \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            --connect-timeout 30 \
            --max-time 60 \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/${{ steps.extract.outputs.jira_key }}/transitions" 2>&1)

          # curl 실행 결과 확인
          curl_exit_code=$?
          echo "[DEBUG] Curl exit code: $curl_exit_code"
          echo "[DEBUG] Raw response: $response"

          # curl 명령어 자체가 실패한 경우
          if [ $curl_exit_code -ne 0 ] || [[ "$response" == *"CURL_FAILED"* ]] || [[ "$response" == *"Could not resolve"* ]] || [[ "$response" == *"Failed to connect"* ]]; then
            echo "[ERROR] Failed to connect to Jira API (curl exit code: $curl_exit_code)"
            echo "[ERROR] Common causes:"
            echo "[ERROR] - Invalid JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}"
            echo "[ERROR] - Network connectivity issues"
            echo "[ERROR] - DNS resolution failure"
            echo "[ERROR] - SSL/TLS certificate issues"
            echo "[ERROR] - Firewall blocking the connection"
            echo "done_id=" >> $GITHUB_OUTPUT
            echo "in_progress_id=" >> $GITHUB_OUTPUT
            echo "review_id=" >> $GITHUB_OUTPUT
            echo "todo_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # HTTP 상태 코드와 응답 본문 분리
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          response_body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')

          echo "[DEBUG] HTTP Status: $http_status"
          echo "[DEBUG] Raw transitions response: $response_body"

          # HTTP 상태 코드 체크
          if [ "$http_status" != "200" ]; then
            echo "[ERROR] Jira API call failed with status $http_status"
            echo "[ERROR] Response: $response_body"
            if [ "$http_status" = "401" ]; then
              echo "[ERROR] Authentication failed. Check JIRA_USER_EMAIL and JIRA_API_TOKEN"
            elif [ "$http_status" = "404" ]; then
              echo "[ERROR] Issue ${{ steps.extract.outputs.jira_key }} not found. Check if the issue exists in Jira"
            elif [ "$http_status" = "403" ]; then
              echo "[ERROR] Permission denied. Check if the user has access to this issue"
            fi
            # 빈 값으로 설정하고 계속 진행
            echo "done_id=" >> $GITHUB_OUTPUT
            echo "in_progress_id=" >> $GITHUB_OUTPUT
            echo "review_id=" >> $GITHUB_OUTPUT
            echo "todo_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Available transitions:"
          echo "$response_body" | jq '.transitions[] | {id: .id, name: .name}'

          # 일반적인 전환 ID 찾기
          done_id=$(echo "$response_body" | jq -r '.transitions[] | select(.name | test("Done|완료|Closed|종료"; "i")) | .id' | head -1)
          in_progress_id=$(echo "$response_body" | jq -r '.transitions[] | select(.name | test("In Progress|진행 중|진행중"; "i")) | .id' | head -1)
          review_id=$(echo "$response_body" | jq -r '.transitions[] | select(.name | test("In Review|Review|검토|리뷰"; "i")) | .id' | head -1)
          todo_id=$(echo "$response_body" | jq -r '.transitions[] | select(.name | test("To Do|할 일|대기"; "i")) | .id' | head -1)

          echo "[DEBUG] done_id: $done_id"
          echo "[DEBUG] in_progress_id: $in_progress_id"
          echo "[DEBUG] review_id: $review_id"
          echo "[DEBUG] todo_id: $todo_id"

          echo "done_id=$done_id" >> $GITHUB_OUTPUT
          echo "in_progress_id=$in_progress_id" >> $GITHUB_OUTPUT
          echo "review_id=$review_id" >> $GITHUB_OUTPUT
          echo "todo_id=$todo_id" >> $GITHUB_OUTPUT

      - name: Update Jira Status - Issue Closed
        if: github.event.action == 'closed' && github.event.issue && steps.extract.outputs.jira_key && steps.transitions.outputs.done_id
        continue-on-error: true
        run: |
          echo "[DEBUG] Updating Jira status to Done for issue: ${{ steps.extract.outputs.jira_key }}"
          curl -X POST \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            -d '{"transition": {"id": "${{ steps.transitions.outputs.done_id }}"}}' \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/${{ steps.extract.outputs.jira_key }}/transitions" || echo "[ERROR] Failed to update Jira status"

      - name: Update Jira Status - Issue Reopened
        if: github.event.action == 'reopened' && steps.extract.outputs.jira_key && steps.transitions.outputs.todo_id
        continue-on-error: true
        run: |
          echo "[DEBUG] Updating Jira status to To Do for issue: ${{ steps.extract.outputs.jira_key }}"
          curl -X POST \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            -d '{"transition": {"id": "${{ steps.transitions.outputs.todo_id }}"}}' \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/${{ steps.extract.outputs.jira_key }}/transitions" || echo "[ERROR] Failed to update Jira status"

      - name: Update Jira Status - PR Opened
        if: github.event.action == 'opened' && github.event.pull_request && steps.extract.outputs.jira_key && steps.transitions.outputs.review_id
        continue-on-error: true
        run: |
          echo "[DEBUG] Updating Jira status to In Review for issue: ${{ steps.extract.outputs.jira_key }}"
          curl -X POST \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            -d '{"transition": {"id": "${{ steps.transitions.outputs.review_id }}"}}' \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/${{ steps.extract.outputs.jira_key }}/transitions" || echo "[ERROR] Failed to update Jira status"

      - name: Update Jira Status - PR Merged
        if: github.event.pull_request.merged == true && steps.extract.outputs.jira_key && steps.transitions.outputs.done_id
        continue-on-error: true
        run: |
          echo "[DEBUG] Updating Jira status to Done for issue: ${{ steps.extract.outputs.jira_key }}"
          curl -X POST \
            -H "Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)" \
            -H "Content-Type: application/json" \
            -d '{"transition": {"id": "${{ steps.transitions.outputs.done_id }}"}}' \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/${{ steps.extract.outputs.jira_key }}/transitions" || echo "[ERROR] Failed to update Jira status"

      # 디버깅용 - 전환 실패 시 로그 출력
      - name: Debug - Show Current Issue Status
        if: always() && steps.extract.outputs.jira_key
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          jira_url="${{ secrets.JIRA_BASE_URL }}"
          auth_header="Authorization: Basic $(echo -n ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }} | base64)"

          echo "[DEBUG] Checking current Jira status for $jira_key"
          curl -s -X GET \
            -H "$auth_header" \
            "$jira_url/rest/api/2/issue/$jira_key?fields=status" | \
            jq '.fields.status' || echo "[ERROR] Failed to get issue status"
