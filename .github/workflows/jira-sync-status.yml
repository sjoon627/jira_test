name: Sync Issue Status with Jira

on:
  issues:
    types: [closed, reopened]
  pull_request:
    types: [opened, closed]

jobs:
  sync-status:
    runs-on: ubuntu-latest
    steps:
      - name: üîë Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: ‚úÇÔ∏è Extract Jira key from title
        id: extract
        continue-on-error: true
        run: |
          title="${{ github.event.issue.title || github.event.pull_request.title || 'No title' }}"
          echo "üîç Processing title: '$title'"
          
          # Use Python for robust regex matching
          jira_key=$(echo "$title" | python3 -c "
          import re
          import sys
          title = sys.stdin.read().strip()
          match = re.search(r'([A-Z][A-Z0-9]+-\d+)', title)
          if match:
              print(match.group(1))
          ")
          
          if [ -n "$jira_key" ]; then
            echo "‚úÖ Found Jira key: $jira_key"
            echo "jira_key=$jira_key" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No Jira key found in title"
            echo "jira_key=" >> $GITHUB_OUTPUT
          fi

      - name: üîÑ Get Jira transitions
        id: transitions
        if: steps.extract.outputs.jira_key
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          echo "üîç Getting transitions for: $jira_key"
          
          # Get available transitions
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key/transitions")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "200" ]; then
            transitions_json=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
            echo "‚úÖ Got transitions successfully"
            echo "Response: $transitions_json"
            
            # Extract transition IDs (common names)
            done_id=$(echo "$transitions_json" | python3 -c "
            import json, sys
            data = json.load(sys.stdin)
            for t in data.get('transitions', []):
                name = t.get('name', '').lower()
                if 'done' in name or 'complete' in name or 'resolve' in name or 'close' in name:
                    print(t.get('id', ''))
                    break
            ")
            
            todo_id=$(echo "$transitions_json" | python3 -c "
            import json, sys
            data = json.load(sys.stdin)
            for t in data.get('transitions', []):
                name = t.get('name', '').lower()
                if 'to do' in name or 'todo' in name or 'open' in name or 'reopen' in name:
                    print(t.get('id', ''))
                    break
            ")
            
            in_progress_id=$(echo "$transitions_json" | python3 -c "
            import json, sys
            data = json.load(sys.stdin)
            for t in data.get('transitions', []):
                name = t.get('name', '').lower()
                if 'in progress' in name or 'progress' in name or 'review' in name:
                    print(t.get('id', ''))
                    break
            ")
            
            echo "done_id=$done_id" >> $GITHUB_OUTPUT
            echo "todo_id=$todo_id" >> $GITHUB_OUTPUT
            echo "in_progress_id=$in_progress_id" >> $GITHUB_OUTPUT
            
            echo "üìã Transition IDs: Done=$done_id, Todo=$todo_id, InProgress=$in_progress_id"
          else
            echo "::error::Failed to get transitions (exit: $curl_exit_code, status: $http_status)"
            echo "done_id=" >> $GITHUB_OUTPUT
            echo "todo_id=" >> $GITHUB_OUTPUT
            echo "in_progress_id=" >> $GITHUB_OUTPUT
          fi

      - name: üìä Show current Jira issue status
        if: steps.extract.outputs.jira_key
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          echo "üîç Getting current status for: $jira_key"
          
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key?fields=status")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "200" ]; then
            status_json=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
            current_status=$(echo "$status_json" | python3 -c "
            import json, sys
            try:
                data = json.load(sys.stdin)
                print(data['fields']['status']['name'])
            except:
                print('Unknown')
            ")
            echo "üìä Current Jira status: $current_status"
          else
            echo "::warning::Could not get current status (exit: $curl_exit_code, status: $http_status)"
          fi

      # Issue closed ‚Üí Jira Done
      - name: ‚úÖ Mark Jira issue as Done (Issue closed)
        if: github.event.action == 'closed' && github.event.issue && steps.extract.outputs.jira_key && steps.transitions.outputs.done_id
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          transition_id="${{ steps.transitions.outputs.done_id }}"
          echo "‚úÖ Marking $jira_key as Done (transition: $transition_id)"
          
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key/transitions")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "204" ]; then
            echo "‚úÖ Successfully marked $jira_key as Done"
          else
            echo "::error::Failed to mark as Done (exit: $curl_exit_code, status: $http_status)"
            echo "Response: $(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')"
          fi

      # Issue reopened ‚Üí Jira To Do
      - name: üîÑ Mark Jira issue as To Do (Issue reopened)
        if: github.event.action == 'reopened' && steps.extract.outputs.jira_key && steps.transitions.outputs.todo_id
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          transition_id="${{ steps.transitions.outputs.todo_id }}"
          echo "üîÑ Marking $jira_key as To Do (transition: $transition_id)"
          
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key/transitions")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "204" ]; then
            echo "‚úÖ Successfully marked $jira_key as To Do"
          else
            echo "::error::Failed to mark as To Do (exit: $curl_exit_code, status: $http_status)"
            echo "Response: $(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')"
          fi

      # PR opened ‚Üí Jira In Progress
      - name: üöÄ Mark Jira issue as In Progress (PR opened)
        if: github.event.action == 'opened' && github.event.pull_request && steps.extract.outputs.jira_key && steps.transitions.outputs.in_progress_id
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          transition_id="${{ steps.transitions.outputs.in_progress_id }}"
          echo "üöÄ Marking $jira_key as In Progress (transition: $transition_id)"
          
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key/transitions")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "204" ]; then
            echo "‚úÖ Successfully marked $jira_key as In Progress"
          else
            echo "::error::Failed to mark as In Progress (exit: $curl_exit_code, status: $http_status)"
            echo "Response: $(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')"
          fi

      # PR merged ‚Üí Jira Done
      - name: ‚úÖ Mark Jira issue as Done (PR merged)
        if: github.event.action == 'closed' && github.event.pull_request && github.event.pull_request.merged == true && steps.extract.outputs.jira_key && steps.transitions.outputs.done_id
        continue-on-error: true
        run: |
          jira_key="${{ steps.extract.outputs.jira_key }}"
          transition_id="${{ steps.transitions.outputs.done_id }}"
          echo "‚úÖ Marking $jira_key as Done (PR merged, transition: $transition_id)"
          
          response=$(curl -s -w "HTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic $(echo -n '${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}' | base64)" \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$transition_id\"}}" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/$jira_key/transitions")
          
          curl_exit_code=$?
          http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2 || echo "000")
          
          if [ $curl_exit_code -eq 0 ] && [ "$http_status" = "204" ]; then
            echo "‚úÖ Successfully marked $jira_key as Done (PR merged)"
          else
            echo "::error::Failed to mark as Done (exit: $curl_exit_code, status: $http_status)"
            echo "Response: $(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')"
          fi

      - name: üìã Workflow Summary
        if: always()
        run: |
          echo "## üìã Jira Sync Workflow Summary"
          echo "**Event:** ${{ github.event_name }} - ${{ github.event.action }}"
          echo "**Title:** ${{ github.event.issue.title || github.event.pull_request.title || 'No title' }}"
          echo "**Jira Key:** ${{ steps.extract.outputs.jira_key || 'Not found' }}"
          echo "**Available Transitions:** Done=${{ steps.transitions.outputs.done_id || 'N/A' }}, Todo=${{ steps.transitions.outputs.todo_id || 'N/A' }}, InProgress=${{ steps.transitions.outputs.in_progress_id || 'N/A' }}"
          
          if [ -n "${{ steps.extract.outputs.jira_key }}" ]; then
            echo "‚úÖ Jira key extracted successfully"
          else
            echo "‚ö†Ô∏è No Jira key found - check title format (should contain: PROJ-123)"
          fi
