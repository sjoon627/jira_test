name: Create Jira Issue and Branch from Issue Form

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write

jobs:
  automation:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Issue Form Data
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            const get = (label) => {
              const m = body.match(new RegExp(`### ${label.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\s*\\n+([^#]+?)(?=\\n+###|$)`, 's'));
              return m ? m[1].trim() : '';
            };
            core.setOutput('issue_type', get('이슈 유형'));
            core.setOutput('epic_number', get('🎟️ 상위 작업 (Ticket Number)'));
            core.setOutput('issue_label', get('GitHub 레이블 추가'));
            core.setOutput('branch_name', get('🌳 브랜치명 (Branch)'));
            core.setOutput('issue_description', get('📝 상세 내용(Description)'));
            const taskListMatch = body.match(/### ✅ 체크리스트\(Tasks\)\s*\n+((?:- \[.\].+\n?)*)/);
            core.setOutput('task_list', taskListMatch ? taskListMatch[1].trim() : '');

      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Create Jira Issue
        id: create_jira
        uses: atlassian/gajira-create@v3
        with:
          project: TEST1
          issuetype: ${{ steps.parse.outputs.issue_type }}
          summary: ${{ github.event.issue.title }}
          description: |
            ${{ steps.parse.outputs.issue_description }}

            ---
            h3. 작업 목록
            ${{ steps.parse.outputs.task_list }}

            ---
            _Original GitHub Issue:_ ${{ github.event.issue.html_url }}
          fields: ${{ steps.parse.outputs.epic_number && steps.parse.outputs.epic_number != '_No response_' && format('{"parent":{{"key":"{0}"}}}', steps.parse.outputs.epic_number) || '{}' }}

      - name: Update GitHub Issue Title
        if: steps.create_jira.outputs.issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `[${{ steps.create_jira.outputs.issue }}] ${{ github.event.issue.title }}`
            });

      - name: Add GitHub Labels
        if: steps.parse.outputs.issue_label && steps.parse.outputs.issue_label != '_No response_'
        uses: actions/github-script@v7
        with:
          script: |
            const labels = '${{ steps.parse.outputs.issue_label }}'.split(',').map(l => l.trim()).filter(Boolean);
            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels
              });
            }

      - name: Checkout repository
        if: steps.parse.outputs.branch_name && steps.parse.outputs.branch_name != '_No response_'
        uses: actions/checkout@v4

      - name: Create Branch
        id: create_branch
        if: steps.parse.outputs.branch_name && steps.parse.outputs.branch_name != '_No response_' && steps.create_jira.outputs.issue
        run: |
          ISSUE_KEY="${{ steps.create_jira.outputs.issue }}"
          RAW_BRANCH_NAME="${{ steps.parse.outputs.branch_name }}"
          if [[ "$RAW_BRANCH_NAME" == feat/* ]]; then
            BRANCH_NAME="feat/$ISSUE_KEY/${RAW_BRANCH_NAME#feat/}"
          elif [[ "$RAW_BRANCH_NAME" == fix/* ]]; then
            BRANCH_NAME="fix/$ISSUE_KEY/${RAW_BRANCH_NAME#fix/}"
          elif [[ "$RAW_BRANCH_NAME" == chore/* ]]; then
            BRANCH_NAME="chore/$ISSUE_KEY/${RAW_BRANCH_NAME#chore/}"
          else
            BRANCH_NAME="$ISSUE_KEY/$RAW_BRANCH_NAME"
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Comment Branch Info
        if: steps.create_branch.outputs.branch_name
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🌿 Branch \`${{ steps.create_branch.outputs.branch_name }}\` has been created.\n\nTo link it in the Development section, create a PR from this
